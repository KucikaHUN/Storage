/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package oop;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import oop.datas.DataManager;
import oop.entities.Durable;
import oop.entities.Entity;
import oop.types.DataManagerType;
import oop.types.PropertyType;
import oop.types.SearchType;

/**
 *
 * @author kucik
 */
class SearchDialog extends javax.swing.JDialog {

    private final DataManager<? extends Entity> manager;
    private List<Entity> products;
    private final List<PropertyType> availableSearchTypes;

    /**
     * Creates new form SearchDialog
     *
     * @param modal
     * @param manager
     * @param type
     * @param products
     */
    public SearchDialog(DataManager<? extends Entity> manager, DataManagerType type,
            List<? extends Entity> products) {
        initComponents();
        this.manager = manager;
        this.products = (List<Entity>) products;
        availableSearchTypes = fillAvailableSearchTypes(type);
        fillPropertyBox();
        fillSearchBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        closeBt = new javax.swing.JButton();
        searchBt = new javax.swing.JButton();
        searchTextAnswer = new javax.swing.JTextField();
        propertyTypeComboBox = new javax.swing.JComboBox<>();
        searchTypeComboBox = new javax.swing.JComboBox<>();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        closeBt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        closeBt.setText("Close");
        closeBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtActionPerformed(evt);
            }
        });

        searchBt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchBt.setText("Search");
        searchBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchTextAnswer)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchBt)
                        .addGap(72, 72, 72)
                        .addComponent(closeBt))
                    .addComponent(propertyTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(95, 95, 95))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(propertyTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(searchTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchTextAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBt)
                    .addComponent(closeBt))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeBtActionPerformed

    private void searchBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtActionPerformed
        String word = searchTextAnswer.getText();
        String selectedPropertyCombo = String.valueOf(propertyTypeComboBox.getSelectedItem());
        PropertyType propertyType = (PropertyType.valueOf(selectedPropertyCombo));
        String selectedSearchCombo = String.valueOf(searchTypeComboBox.getSelectedItem());
        SearchType searchType = SearchType.valueOf(selectedSearchCombo);
        List<Entity> list = (List<Entity>) manager.searchWithWord(products,propertyType, word, searchType);
        products.clear();
        products.addAll(list);
        this.dispose();
    }//GEN-LAST:event_searchBtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SearchDialog dialog = new SearchDialog(null, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBt;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> propertyTypeComboBox;
    private javax.swing.JButton searchBt;
    private javax.swing.JTextField searchTextAnswer;
    private javax.swing.JComboBox<String> searchTypeComboBox;
    // End of variables declaration//GEN-END:variables

    private List<PropertyType> fillAvailableSearchTypes(DataManagerType type) {
        Map<DataManagerType, List<PropertyType>> result = new HashMap<>();
        
        result.put(DataManagerType.DURABLE_MANAGER, putDurablePropertyTypes());
        result.put(DataManagerType.PERISHABLE_MANAGER, putPerishablePropertyTypes());
        result.put(DataManagerType.TAX_MANAGER, putTaxPropertyTypes());

        return result.get(type);
    }

    private List<PropertyType> putDurablePropertyTypes() {
        List<PropertyType> types = new ArrayList<>();

        types.add(PropertyType.ARTICLE_NUMBER);
        types.add(PropertyType.NAME);
        types.add(PropertyType.BRAND);
        types.add(PropertyType.FAMILY);
        types.add(PropertyType.NETTO_PRICE);
        types.add(PropertyType.TAX_ID);
        types.add(PropertyType.QUANTITY);
        types.add(PropertyType.CRITICAL_QUANTITY);
        types.add(PropertyType.AMOUNT_UNITS);
        types.add(PropertyType.WARANTY_PERIOD);
        types.add(PropertyType.GROSS_WEIGHT);

        return types;
    }

    private List<PropertyType> putPerishablePropertyTypes() {
        List<PropertyType> types = new ArrayList<>();

        types.add(PropertyType.ARTICLE_NUMBER);
        types.add(PropertyType.NAME);
        types.add(PropertyType.BRAND);
        types.add(PropertyType.FAMILY);
        types.add(PropertyType.NETTO_PRICE);
        types.add(PropertyType.TAX_ID);
        types.add(PropertyType.QUANTITY);
        types.add(PropertyType.CRITICAL_QUANTITY);
        types.add(PropertyType.AMOUNT_UNITS);
        types.add(PropertyType.EXPIRATION_DATE);
        types.add(PropertyType.PRODUCTION_DATE);

        return types;
    }

    private List<PropertyType> putTaxPropertyTypes() {
        List<PropertyType> types = new ArrayList<>();
        types.add(PropertyType.TAX_KEY);
        return types;
    }

    private void fillPropertyBox() {
        for (PropertyType availableSearchType : availableSearchTypes) {
            propertyTypeComboBox.addItem(availableSearchType.toString());
        }
    }

    private void fillSearchBox() {
        searchTypeComboBox.addItem("ALL");
        searchTypeComboBox.addItem("CONCRETE");
        searchTypeComboBox.addItem("FORWARD");
        searchTypeComboBox.addItem("BACKWARD");
    }
}
