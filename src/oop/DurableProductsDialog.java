/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package oop;

import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import oop.datas.DataEventListener;
import oop.datas.DataManager;
import oop.entities.Durable;
import oop.exceptions.ErrorException;
import oop.types.DataManagerType;
import oop.types.PropertyType;

/**
 *
 * @author kucik
 */
class DurableProductsDialog extends javax.swing.JDialog {

    private ModelsManager model;
    private final DataManager<Durable> manager;
    private List<Durable> products;
    private JTableHeader header;
    private final Map<Integer, Function<List<Durable>, List<Durable>>> sorter;

    /**
     * Creates new form DurableProductsDialog
     *
     *
     * @param modal
     * @param manager
     */
    public DurableProductsDialog(DataManager<Durable> manager) {
        initComponents();
        this.model = new ModelsManager((DefaultTableModel) productsTable.getModel());
        this.manager = manager;
        products = manager.getList();
        fillTable(products);
        sorter = fillSorter();
        createHeaderListener();
        manager.addListener(new DataEventListener() {
            @Override
            public void update() {
                manager.refreshData();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        addProductBt = new javax.swing.JButton();
        changeProductBt = new javax.swing.JButton();
        deleteProductBt = new javax.swing.JButton();
        increaseQuantityProductBt = new javax.swing.JButton();
        decreaseQuantityProductBt = new javax.swing.JButton();
        searchProductBt = new javax.swing.JButton();
        closeBt = new javax.swing.JButton();
        productsBelowCriticalQuantityBt = new javax.swing.JButton();
        statisticBt = new javax.swing.JButton();
        reloadBt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Article Number", "Name", "Brand", "Family", "Netto Price", "Brutto Price", "Tax", "Quantity", "Critical Quantity", "Amount Units", "Waranty Period", "Gross Weight", "Critical Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productsTable);

        addProductBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addProductBt.setText("Add");
        addProductBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductBtActionPerformed(evt);
            }
        });

        changeProductBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        changeProductBt.setText("Change");
        changeProductBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeProductBtActionPerformed(evt);
            }
        });

        deleteProductBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteProductBt.setText("Delete");
        deleteProductBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductBtActionPerformed(evt);
            }
        });

        increaseQuantityProductBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        increaseQuantityProductBt.setText("Increase Quantity");
        increaseQuantityProductBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseQuantityProductBtActionPerformed(evt);
            }
        });

        decreaseQuantityProductBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        decreaseQuantityProductBt.setText("Decrease Quantity");
        decreaseQuantityProductBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseQuantityProductBtActionPerformed(evt);
            }
        });

        searchProductBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchProductBt.setText("Search");
        searchProductBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchProductBtActionPerformed(evt);
            }
        });

        closeBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        closeBt.setText("Close");
        closeBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtActionPerformed(evt);
            }
        });

        productsBelowCriticalQuantityBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        productsBelowCriticalQuantityBt.setText("Below Critical");
        productsBelowCriticalQuantityBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productsBelowCriticalQuantityBtActionPerformed(evt);
            }
        });

        statisticBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        statisticBt.setText("Statistic");
        statisticBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticBtActionPerformed(evt);
            }
        });

        reloadBt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reloadBt.setText("Reload");
        reloadBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addProductBt)
                                .addGap(33, 33, 33)
                                .addComponent(changeProductBt)
                                .addGap(31, 31, 31)
                                .addComponent(deleteProductBt))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(increaseQuantityProductBt)
                                .addGap(18, 18, 18)
                                .addComponent(decreaseQuantityProductBt)))
                        .addGap(195, 195, 195)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchProductBt)
                                .addGap(27, 27, 27)
                                .addComponent(productsBelowCriticalQuantityBt)
                                .addGap(41, 41, 41)
                                .addComponent(statisticBt))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reloadBt)
                                .addGap(43, 43, 43)
                                .addComponent(closeBt)))
                        .addGap(0, 617, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProductBt)
                    .addComponent(changeProductBt)
                    .addComponent(deleteProductBt)
                    .addComponent(searchProductBt)
                    .addComponent(productsBelowCriticalQuantityBt)
                    .addComponent(statisticBt))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(increaseQuantityProductBt)
                    .addComponent(decreaseQuantityProductBt)
                    .addComponent(closeBt)
                    .addComponent(reloadBt))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void statisticBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticBtActionPerformed
        StatisticDialog statisticDialog = new StatisticDialog(manager);
        statisticDialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        statisticDialog.setModal(true);
        statisticDialog.setVisible(true);
    }//GEN-LAST:event_statisticBtActionPerformed

    private void closeBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeBtActionPerformed

    private void productsBelowCriticalQuantityBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productsBelowCriticalQuantityBtActionPerformed
        try {
            products = (List<Durable>) manager.getProductsBelowCriticalQuantity(products);
            fillTable(products);
        } catch (ErrorException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_productsBelowCriticalQuantityBtActionPerformed

    private void searchProductBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchProductBtActionPerformed
        SearchDialog searchDialog = new SearchDialog(manager, DataManagerType.DURABLE_MANAGER, products);
        searchDialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        searchDialog.setModal(true);
        searchDialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                fillTable(products);
            }
        });
        searchDialog.setVisible(true);

    }//GEN-LAST:event_searchProductBtActionPerformed

    private void addProductBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductBtActionPerformed
        DurableProductEditorDialog editorDialog
                = new DurableProductEditorDialog(null, manager, products);
        editorDialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        editorDialog.setModal(true);
        editorDialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                fillTable(products);
            }
        });
        editorDialog.setVisible(true);
    }//GEN-LAST:event_addProductBtActionPerformed

    private void changeProductBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeProductBtActionPerformed
        int selectedRow = productsTable.getSelectedRow();
        if (selectedRow >= 0) {
            Durable durable = products.get(selectedRow);
            DurableProductEditorDialog editorDialog
                    = new DurableProductEditorDialog(durable, manager, products);
            editorDialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            editorDialog.setModal(true);
            editorDialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    fillTable(products);
                }
            });
            editorDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Product was not chosen");
        }
    }//GEN-LAST:event_changeProductBtActionPerformed

    private void deleteProductBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductBtActionPerformed
        int selectedRow = productsTable.getSelectedRow();
        if (selectedRow >= 0) {
            Durable durable = products.get(selectedRow);
            int dialogResult = JOptionPane.showConfirmDialog(null, durable.getId() + " Want to delete?");
            if (dialogResult == JOptionPane.YES_OPTION) {
                manager.deleteEntity(durable);
                products.remove(durable);
            }
            fillTable(products);
        } else {
            JOptionPane.showMessageDialog(null, "Product was not chosen");
        }
    }//GEN-LAST:event_deleteProductBtActionPerformed

    private void increaseQuantityProductBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseQuantityProductBtActionPerformed
        int selectedRow = productsTable.getSelectedRow();
        if (selectedRow >= 0) {
            try {
                Durable durable = products.get(selectedRow);
                String quantity = JOptionPane.showInputDialog(null, durable.getId(), "Increase Quantity: ", JOptionPane.QUESTION_MESSAGE);
                String regex = "[0-9]+";
                int value;
                if (quantity != null && quantity.matches(regex)) {
                    value = Integer.parseInt(quantity);
                    manager.increaseProductQuantity(durable, value);
                    int amount = manager.getEntityQuantityIfHaveWithId(durable);
                    durable.setQuantity(amount);
                    fillTable(products);
                }
            } catch (ErrorException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Product was not chosen");
        }
    }//GEN-LAST:event_increaseQuantityProductBtActionPerformed

    private void decreaseQuantityProductBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseQuantityProductBtActionPerformed
        int selectedRow = productsTable.getSelectedRow();
        if (selectedRow >= 0) {
            try {
                Durable durable = products.get(selectedRow);
                String quantity = JOptionPane.showInputDialog(null, durable.getId(), "Decrease Quantity: ", JOptionPane.QUESTION_MESSAGE);
                String regex = "[0-9]+";
                int value;
                if (quantity != null && quantity.matches(regex)) {
                    value = Integer.parseInt(quantity);
                    manager.decreaseProductQuantity(durable, value);
                    int amount = manager.getEntityQuantityIfHaveWithId(durable);
                    durable.setQuantity(amount);
                    fillTable(products);
                }
            } catch (ErrorException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Product was not chosen");
        }
    }//GEN-LAST:event_decreaseQuantityProductBtActionPerformed

    private void reloadBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadBtActionPerformed
        products = manager.getList();
        fillTable(products);
    }//GEN-LAST:event_reloadBtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DurableProductsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DurableProductsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DurableProductsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DurableProductsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DurableProductsDialog dialog = new DurableProductsDialog(null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProductBt;
    private javax.swing.JButton changeProductBt;
    private javax.swing.JButton closeBt;
    private javax.swing.JButton decreaseQuantityProductBt;
    private javax.swing.JButton deleteProductBt;
    private javax.swing.JButton increaseQuantityProductBt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton productsBelowCriticalQuantityBt;
    private javax.swing.JTable productsTable;
    private javax.swing.JButton reloadBt;
    private javax.swing.JButton searchProductBt;
    private javax.swing.JButton statisticBt;
    // End of variables declaration//GEN-END:variables

    private void fillTable(List<Durable> products) {
        DefaultTableModel m = model.getModel();
        removeTableRows(m);

        String[] utilArray;
        for (Durable product : products) {
            utilArray = productToStringArray(product);
            m.addRow(utilArray);
        }
    }

    private String[] productToStringArray(Durable product) {
        String[] result = new String[13];
        String id = product.getId();
        String name = product.getName();
        String brand = product.getBrand();
        String family = product.getFamily();
        String nettoPrice = String.valueOf(product.getNettoPrice());
        String bruttoPrice = String.valueOf(product.getBruttoPrice());
        String taxId = String.valueOf(product.getTaxId());
        String quantity = String.valueOf(product.getQuantity());
        String criticalQuantity = String.valueOf(product.getCriticalQuantity());
        String amountUnits = product.getAmountUnits();
        String warantyPeriod = String.valueOf(product.getWarantyPeriod());
        String grossWeight = String.valueOf(product.getGrossWeight());
        String haveLoweCriticalQuantity = String.valueOf(product.haveLowCriticalQuantity());

        result[0] = id;
        result[1] = name;
        result[2] = brand;
        result[3] = family;
        result[4] = nettoPrice;
        result[5] = bruttoPrice;
        result[6] = taxId;
        result[7] = quantity;
        result[8] = criticalQuantity;
        result[9] = amountUnits;
        result[10] = warantyPeriod;
        result[11] = grossWeight;
        result[12] = haveLoweCriticalQuantity;

        return result;
    }

    private void createHeaderListener() {
        header = productsTable.getTableHeader();
        header.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Point point = e.getPoint();
                int column = productsTable.columnAtPoint(point);
                int clickCount = e.getClickCount();
                boolean doubleClick = false;
                if (clickCount >= 2) {
                    doubleClick = true;
                }
                sortListWithColumn(column, doubleClick);
            }

            private void sortListWithColumn(int column, boolean reverse) {

                products = sorter.getOrDefault(column, (list)
                        -> Collections.emptyList()).apply(products);
                if (products.isEmpty()) {
                    products = manager.getList();
                } else if (reverse) {
                    products = manager.reverseList(products);
                }
                fillTable(products);

            }
        });
    }

    private Map<Integer, Function<List<Durable>, List<Durable>>> fillSorter() {
        Map<Integer, Function<List<Durable>, List<Durable>>> result = new HashMap<>();

        result.put(0, (list) -> manager.sortByProperty(PropertyType.ARTICLE_NUMBER, list));
        result.put(1, (list) -> manager.sortByProperty(PropertyType.NAME, list));
        result.put(2, (list) -> manager.sortByProperty(PropertyType.BRAND, list));
        result.put(3, (list) -> manager.sortByProperty(PropertyType.FAMILY, list));
        result.put(4, (list) -> manager.sortByProperty(PropertyType.NETTO_PRICE, list));
        result.put(6, (list) -> manager.sortByProperty(PropertyType.TAX_ID, list));
        result.put(7, (list) -> manager.sortByProperty(PropertyType.QUANTITY, list));
        result.put(8, (list) -> manager.sortByProperty(PropertyType.CRITICAL_QUANTITY, list));
        result.put(9, (list) -> manager.sortByProperty(PropertyType.AMOUNT_UNITS, list));
        result.put(10, (list) -> manager.sortByProperty(PropertyType.WARANTY_PERIOD, list));
        result.put(11, (list) -> manager.sortByProperty(PropertyType.GROSS_WEIGHT, list));

        return result;
    }

    private void removeTableRows(DefaultTableModel m) {
        for (int i = m.getRowCount(); i > 0; i--) {
            m.removeRow(i - 1);
        }
    }

}
