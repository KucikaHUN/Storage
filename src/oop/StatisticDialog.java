/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package oop;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import oop.datas.DataManager;
import oop.entities.Entity;
import oop.entities.Product;
import oop.statistics.StatisticHandler;
import oop.statistics.StatisticHandlerFactory;
import oop.statistics.StatisticTax;
import oop.types.PropertyType;
import oop.types.StatisticType;

/**
 *
 * @author kucik
 */
class StatisticDialog extends javax.swing.JDialog {

    private final DataManager<? extends Entity> manager;

    /**
     * Creates new form StatisticDialog
     */
    public StatisticDialog(DataManager<? extends Entity> manager) {
        initComponents();
        this.manager = manager;
        fillStatistic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statisticTable = new javax.swing.JTable();
        closeBt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        statisticTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tax", "All Netto", "All Brutto", "All Netto Average", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(statisticTable);

        closeBt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        closeBt.setText("Close");
        closeBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(closeBt)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(closeBt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeBtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StatisticDialog dialog = new StatisticDialog(null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable statisticTable;
    // End of variables declaration//GEN-END:variables

    private void fillStatistic() {
        StatisticHandler handler = StatisticHandlerFactory.createStatisticHandler(StatisticType.TAX);
        List<? extends Product> products = (List<? extends Product>) manager.getList();
        List<StatisticTax> taxes = (List<StatisticTax>) handler.getStatistics(products);
        DefaultTableModel model = (DefaultTableModel) statisticTable.getModel();
        taxes = sortByTaxKey(taxes);
        String[] utilArray;
        for (StatisticTax tax : taxes) {
            utilArray = taxToStringArray(tax);
            model.addRow(utilArray);
        }
    }

    private String[] taxToStringArray(StatisticTax tax) {
        String[] result = new String[5];
        result[0] = String.valueOf(tax.getTaxid());
        result[1] = String.valueOf(tax.getNettoPriceAll());
        result[2] = String.valueOf(tax.getBruttoPriceAll());
        result[3] = String.valueOf(tax.getNettoPriceAverage());
        result[4] = String.valueOf(tax.getQuantity());
        return result;
    }

    private List<StatisticTax> sortByTaxKey(List<StatisticTax> taxes) {
        StatisticTax actual;
        StatisticTax next;

        for (int i = 0; i < taxes.size(); i++) {
            for (int j = 0; j < taxes.size() - 1; j++) {
                actual = taxes.get(j);
                next = taxes.get(j + 1);
                if (next.getTaxid() < actual.getTaxid()) {
                    taxes.set(j, next);
                    taxes.set(j + 1, actual);
                }
            }
        }
        return taxes;
    }
}
